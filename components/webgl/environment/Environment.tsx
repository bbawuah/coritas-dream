/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three';
import React, { useRef } from 'react';
import { useGLTF, useTexture } from '@react-three/drei';
import { GLTF } from 'three-stdlib';

type GLTFResult = GLTF & {
  nodes: GLTFNodes;
  materials: {};
};

type GLTFNodes = {
  Circle: THREE.Mesh;
  screen: THREE.Mesh;
  screen001: THREE.Mesh;
  ['main-area']: THREE.Mesh;
  leaves: THREE.Mesh;
  ['main-area001']: THREE.Mesh;
  ['main-area002']: THREE.Mesh;
  ['main-area003']: THREE.Mesh;
  ['main-area004']: THREE.Mesh;
  ['main-area005']: THREE.Mesh;
  ['main-area006']: THREE.Mesh;
  ['main-area007']: THREE.Mesh;
  ['opt-pillar']: THREE.Mesh;
  ['opt-pillar001']: THREE.Mesh;
  ['opt-pillar002']: THREE.Mesh;
  ['opt-pillar003']: THREE.Mesh;
  ['opt-pillar004']: THREE.Mesh;
  ['opt-pillar005']: THREE.Mesh;
  ['opt-pillar006']: THREE.Mesh;
  ['opt-pillar007']: THREE.Mesh;
  ['opt-pillar008']: THREE.Mesh;
  ['opt-pillar009']: THREE.Mesh;
  ['opt-pillar010']: THREE.Mesh;
  ['opt-pillar011']: THREE.Mesh;
  ['opt-pillar012']: THREE.Mesh;
  ['opt-pillar013']: THREE.Mesh;
  ['opt-pillar014']: THREE.Mesh;
  ['opt-pillar015']: THREE.Mesh;
  ['opt-pillar016']: THREE.Mesh;
  ['opt-pillar017']: THREE.Mesh;
  ['opt-pillar018']: THREE.Mesh;
  ['opt-pillar019']: THREE.Mesh;
  ['opt-pillar020']: THREE.Mesh;
  ['opt-pillar021']: THREE.Mesh;
  ['opt-pillar022']: THREE.Mesh;
  ['opt-pillar023']: THREE.Mesh;
  ['opt-pillar024']: THREE.Mesh;
  ['opt-pillar025']: THREE.Mesh;
  ['opt-pillar026']: THREE.Mesh;
  ['opt-pillar027']: THREE.Mesh;
  ['opt-pillar028']: THREE.Mesh;
  ['opt-pillar029']: THREE.Mesh;
  ['opt-pillar030']: THREE.Mesh;
  ['opt-pillar031']: THREE.Mesh;
  ['opt-pillar032']: THREE.Mesh;
  ['opt-pillar033']: THREE.Mesh;
  ['opt-pillar034']: THREE.Mesh;
  ['opt-pillar035']: THREE.Mesh;
  ['opt-pillar036']: THREE.Mesh;
  ['opt-pillar037']: THREE.Mesh;
  ['opt-pillar038']: THREE.Mesh;
  ['opt-pillar039']: THREE.Mesh;
  ['opt-pillar040']: THREE.Mesh;
  ['opt-pillar041']: THREE.Mesh;
  ['opt-pillar042']: THREE.Mesh;
  ['opt-pillar043']: THREE.Mesh;
  ['opt-pillar044']: THREE.Mesh;
  ['opt-pillar045']: THREE.Mesh;
  ['opt-pillar046']: THREE.Mesh;
  ['opt-pillar047']: THREE.Mesh;
  ['opt-pillar048']: THREE.Mesh;
  ['opt-pillar049']: THREE.Mesh;
  fist: THREE.Mesh;
  bridge002: THREE.Mesh;
  ['upper-box001']: THREE.Mesh;
  bridge001: THREE.Mesh;
  bridge003: THREE.Mesh;
  heart: THREE.Mesh;
  dove: THREE.Mesh;
  ['painting-walls']: THREE.Mesh;
  ['love-painting']: THREE.Mesh;
  ['love-painting001']: THREE.Mesh;
  ['love-painting002']: THREE.Mesh;
  ['love-painting003']: THREE.Mesh;
  ['love-painting004']: THREE.Mesh;
  ['hope-painting']: THREE.Mesh;
  ['hope-painting001']: THREE.Mesh;
  ['hope-painting002']: THREE.Mesh;
  ['hope-painting005']: THREE.Mesh;
  ['hope-painting003']: THREE.Mesh;
  ['hope-painting004']: THREE.Mesh;
  ['hope-painting006']: THREE.Mesh;
  ['hope-painting007']: THREE.Mesh;
  ['justice-painting001']: THREE.Mesh;
  ['justice-painting']: THREE.Mesh;
  ['justice-painting002']: THREE.Mesh;
  ['justice-painting003']: THREE.Mesh;
  ['justice-painting007']: THREE.Mesh;
  ['justice-painting004']: THREE.Mesh;
  ['justice-painting005']: THREE.Mesh;
  ['justice-painting006']: THREE.Mesh;
  ['painting-walls001']: THREE.Mesh;
  ['painting-walls002']: THREE.Mesh;
  ['painting-walls003']: THREE.Mesh;
  ['painting-walls004']: THREE.Mesh;
  ['painting-walls005']: THREE.Mesh;
  ['painting-walls006']: THREE.Mesh;
  ['painting-walls007']: THREE.Mesh;
  ['painting-walls008']: THREE.Mesh;
  ['painting-walls009']: THREE.Mesh;
  ['painting-walls010']: THREE.Mesh;
  ['painting-walls011']: THREE.Mesh;
  ['painting-walls012']: THREE.Mesh;
  ['painting-walls013']: THREE.Mesh;
  ['painting-walls014']: THREE.Mesh;
  ['painting-walls015']: THREE.Mesh;
  ['painting-walls016']: THREE.Mesh;
  ['painting-walls017']: THREE.Mesh;
  ['painting-walls018']: THREE.Mesh;
  ['painting-walls019']: THREE.Mesh;
  ['painting-walls020']: THREE.Mesh;
};

interface ComponentProps {
  nodes: GLTFNodes;
  material?: THREE.MeshStandardMaterial;
  baseColor?: THREE.ColorRepresentation;
}

const Pillars: React.FC<ComponentProps> = (props) => {
  const { nodes, material } = props;

  return (
    <>
      <mesh geometry={nodes['opt-pillar'].geometry} material={material} />
      <mesh geometry={nodes['opt-pillar001'].geometry} material={material} />
      <mesh geometry={nodes['opt-pillar002'].geometry} material={material} />
      <mesh geometry={nodes['opt-pillar003'].geometry} material={material} />
      <mesh geometry={nodes['opt-pillar004'].geometry} material={material} />
      <mesh geometry={nodes['opt-pillar005'].geometry} material={material} />
      <mesh geometry={nodes['opt-pillar006'].geometry} material={material} />
      <mesh geometry={nodes['opt-pillar007'].geometry} material={material} />
      <mesh geometry={nodes['opt-pillar008'].geometry} material={material} />
      <mesh geometry={nodes['opt-pillar009'].geometry} material={material} />
      <mesh geometry={nodes['opt-pillar010'].geometry} material={material} />
      <mesh geometry={nodes['opt-pillar011'].geometry} material={material} />
      <mesh geometry={nodes['opt-pillar012'].geometry} material={material} />
      <mesh geometry={nodes['opt-pillar013'].geometry} material={material} />
      <mesh geometry={nodes['opt-pillar014'].geometry} material={material} />
      <mesh geometry={nodes['opt-pillar015'].geometry} material={material} />
      <mesh geometry={nodes['opt-pillar016'].geometry} material={material} />
      <mesh geometry={nodes['opt-pillar017'].geometry} material={material} />
      <mesh geometry={nodes['opt-pillar018'].geometry} material={material} />
      <mesh geometry={nodes['opt-pillar019'].geometry} material={material} />
      <mesh geometry={nodes['opt-pillar020'].geometry} material={material} />
      <mesh geometry={nodes['opt-pillar021'].geometry} material={material} />
      <mesh geometry={nodes['opt-pillar022'].geometry} material={material} />
      <mesh geometry={nodes['opt-pillar023'].geometry} material={material} />
      <mesh geometry={nodes['opt-pillar024'].geometry} material={material} />
      <mesh geometry={nodes['opt-pillar025'].geometry} material={material} />
      <mesh geometry={nodes['opt-pillar026'].geometry} material={material} />
      <mesh geometry={nodes['opt-pillar027'].geometry} material={material} />
      <mesh geometry={nodes['opt-pillar028'].geometry} material={material} />
      <mesh geometry={nodes['opt-pillar029'].geometry} material={material} />
      <mesh geometry={nodes['opt-pillar030'].geometry} material={material} />
      <mesh geometry={nodes['opt-pillar031'].geometry} material={material} />
      <mesh geometry={nodes['opt-pillar032'].geometry} material={material} />
      <mesh geometry={nodes['opt-pillar033'].geometry} material={material} />
      <mesh geometry={nodes['opt-pillar034'].geometry} material={material} />
      <mesh geometry={nodes['opt-pillar035'].geometry} material={material} />
      <mesh geometry={nodes['opt-pillar037'].geometry} material={material} />
      <mesh geometry={nodes['opt-pillar038'].geometry} material={material} />
      <mesh geometry={nodes['opt-pillar039'].geometry} material={material} />
      <mesh geometry={nodes['opt-pillar040'].geometry} material={material} />
      <mesh geometry={nodes['opt-pillar041'].geometry} material={material} />
      <mesh geometry={nodes['opt-pillar042'].geometry} material={material} />
      <mesh geometry={nodes['opt-pillar043'].geometry} material={material} />
      <mesh geometry={nodes['opt-pillar044'].geometry} material={material} />
      <mesh geometry={nodes['opt-pillar045'].geometry} material={material} />
      <mesh geometry={nodes['opt-pillar046'].geometry} material={material} />
      <mesh geometry={nodes['opt-pillar047'].geometry} material={material} />
      <mesh geometry={nodes['opt-pillar048'].geometry} material={material} />
      <mesh geometry={nodes['opt-pillar049'].geometry} material={material} />
    </>
  );
};

const LaunchArea: React.FC<ComponentProps> = (props) => {
  const { nodes, material } = props;

  return <mesh geometry={nodes.Circle.geometry} material={material} />;
};

const Screen: React.FC<ComponentProps> = (props) => {
  const { nodes, material } = props;

  return <mesh geometry={nodes.screen.geometry} material={material} />;
};

const VideoScreen: React.FC<ComponentProps> = (props) => {
  const { nodes, material } = props;

  return (
    <mesh
      geometry={nodes.screen001.geometry}
      material={nodes.screen001.material}
    />
  );
};

const Leaves: React.FC<ComponentProps> = (props) => {
  const { nodes } = props;
  const material = new THREE.MeshStandardMaterial({
    color: 0x84e8ac,
  });

  return <mesh geometry={nodes.leaves.geometry} material={material} />;
};

const Building: React.FC<ComponentProps> = (props) => {
  const { nodes, material } = props;

  return (
    <>
      <mesh geometry={nodes['main-area'].geometry} material={material} />

      <mesh geometry={nodes['main-area001'].geometry} material={material} />
      <mesh geometry={nodes['main-area002'].geometry} material={material} />
      <mesh geometry={nodes['main-area003'].geometry} material={material} />
      <mesh geometry={nodes['main-area004'].geometry} material={material} />
      <mesh geometry={nodes['main-area005'].geometry} material={material} />
      <mesh geometry={nodes['main-area006'].geometry} material={material} />
      <mesh geometry={nodes['main-area007'].geometry} material={material} />
    </>
  );
};

const Fist: React.FC<ComponentProps> = (props) => {
  const { nodes, material } = props;

  return <mesh geometry={nodes.fist.geometry} material={material} />;
};

const Bridges: React.FC<ComponentProps> = (props) => {
  const { nodes, baseColor } = props;

  const material = new THREE.MeshStandardMaterial({
    color: baseColor,
  });

  return (
    <>
      <mesh geometry={nodes.bridge003.geometry} material={material} />
      <mesh geometry={nodes.bridge001.geometry} material={material} />
      <mesh geometry={nodes.bridge002.geometry} material={material} />
    </>
  );
};

const UpperBox: React.FC<ComponentProps> = (props) => {
  const { nodes, material } = props;

  return <mesh geometry={nodes['upper-box001'].geometry} material={material} />;
};

const Heart: React.FC<ComponentProps> = (props) => {
  const { nodes, material } = props;

  return <mesh geometry={nodes.heart.geometry} material={material} />;
};

const Dove: React.FC<ComponentProps> = (props) => {
  const { nodes, material } = props;

  return <mesh geometry={nodes.dove.geometry} material={material} />;
};

const PaintingWalls: React.FC<ComponentProps> = (props) => {
  const { nodes, material } = props;

  return (
    <>
      <mesh geometry={nodes['painting-walls'].geometry} material={material} />
      <mesh
        geometry={nodes['painting-walls001'].geometry}
        material={material}
      />
      <mesh
        geometry={nodes['painting-walls002'].geometry}
        material={material}
      />
      <mesh
        geometry={nodes['painting-walls003'].geometry}
        material={material}
      />
      <mesh
        geometry={nodes['painting-walls004'].geometry}
        material={material}
      />
      <mesh
        geometry={nodes['painting-walls005'].geometry}
        material={material}
      />
      <mesh
        geometry={nodes['painting-walls006'].geometry}
        material={material}
      />
      <mesh
        geometry={nodes['painting-walls007'].geometry}
        material={material}
      />
      <mesh
        geometry={nodes['painting-walls008'].geometry}
        material={material}
      />
      <mesh
        geometry={nodes['painting-walls009'].geometry}
        material={material}
      />
      <mesh
        geometry={nodes['painting-walls010'].geometry}
        material={material}
      />
      <mesh
        geometry={nodes['painting-walls011'].geometry}
        material={material}
      />
      <mesh
        geometry={nodes['painting-walls012'].geometry}
        material={material}
      />
      <mesh
        geometry={nodes['painting-walls013'].geometry}
        material={material}
      />
      <mesh
        geometry={nodes['painting-walls014'].geometry}
        material={material}
      />
      <mesh
        geometry={nodes['painting-walls015'].geometry}
        material={material}
      />
      <mesh
        geometry={nodes['painting-walls016'].geometry}
        material={material}
      />
      <mesh
        geometry={nodes['painting-walls017'].geometry}
        material={material}
      />
      <mesh
        geometry={nodes['painting-walls018'].geometry}
        material={material}
      />
      <mesh
        geometry={nodes['painting-walls019'].geometry}
        material={material}
      />
      <mesh
        geometry={nodes['painting-walls020'].geometry}
        material={material}
      />
    </>
  );
};

const HopePaintings: React.FC<ComponentProps> = (props) => {
  const { nodes } = props;
  const paintings = useTexture([
    './hope/70-08.jpg',
    './hope/69-77.jpg',
    './hope/72-08.jpg',
    './hope/83-20.jpg',
    './hope/69-84.jpg',
    './hope/69-85.jpg',
    './hope/69-82.jpg',
    './hope/69-83.jpg',
  ]);
  const material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });

  return (
    <>
      {paintings.map((painting, index) => {
        painting.flipY = false;

        if (index === 0) {
          return (
            <mesh
              key={index}
              geometry={nodes['hope-painting'].geometry}
              material={new THREE.MeshBasicMaterial({ map: painting })}
            />
          );
        }

        return (
          <mesh
            key={index}
            geometry={
              nodes[`hope-painting00${index as 1 | 2 | 3 | 4 | 5 | 6 | 7}`]
                .geometry
            }
            material={new THREE.MeshBasicMaterial({ map: painting })}
          />
        );
      })}
    </>
  );
};

const LovePaintings: React.FC<ComponentProps> = (props) => {
  const { nodes } = props;
  const paintings = useTexture([
    './love/83-11.jpg',
    './love/85-06.jpg',
    './love/72-01.jpg',
    './love/69-73.jpg',
    './love/67-30.jpg',
  ]);

  return (
    <>
      {paintings.map((painting, index) => {
        painting.flipY = false;

        if (index === 0) {
          return (
            <mesh
              key={index}
              geometry={nodes['love-painting'].geometry}
              material={new THREE.MeshBasicMaterial({ map: painting })}
            />
          );
        }

        return (
          <mesh
            key={index}
            geometry={
              nodes[`love-painting00${index as 1 | 2 | 3 | 4}`].geometry
            }
            material={new THREE.MeshBasicMaterial({ map: painting })}
          />
        );
      })}
    </>
  );
};

const JusticePaintings: React.FC<ComponentProps> = (props) => {
  const { nodes } = props;
  const paintings = useTexture([
    './justice/69-70.jpg',
    './justice/67-29.jpg',
    './justice/69-76.jpg',
    './justice/69-65.jpg',
    './justice/69-66.jpg',
    './justice/69-59.jpg',
    './justice/69-60.jpg',
    './justice/69-62.jpg',
  ]);

  return (
    <>
      {paintings.map((painting, index) => {
        painting.flipY = false;

        if (index === 0) {
          return (
            <mesh
              key={index}
              geometry={nodes['justice-painting'].geometry}
              material={new THREE.MeshBasicMaterial({ map: painting })}
            />
          );
        }

        return (
          <mesh
            key={index}
            geometry={
              nodes[`justice-painting00${index as 1 | 2 | 3 | 4 | 5 | 6 | 7}`]
                .geometry
            }
            material={new THREE.MeshBasicMaterial({ map: painting })}
          />
        );
      })}
    </>
  );
};

export const Model: React.FC = ({ ...props }) => {
  const group = useRef<THREE.Group>();
  const { nodes } = useGLTF('/environment-transformed.glb') as GLTFResult;

  const normalTexture = useTexture('/normal-texture.jpg');
  normalTexture.flipY = false;
  normalTexture.minFilter = THREE.LinearFilter;

  const color = 0x1d1b18;
  const material = new THREE.MeshStandardMaterial({
    color,
    normalMap: normalTexture,
    normalScale: new THREE.Vector2(0.5, 0.5),
  });

  return (
    <group
      ref={group}
      {...props}
      dispose={null}
      position={new THREE.Vector3(0, -0.5, 0)}
    >
      <LaunchArea nodes={nodes} material={material} />
      <Pillars nodes={nodes} material={material} />
      <Screen nodes={nodes} material={material} />
      <VideoScreen nodes={nodes} material={material} />
      <Leaves nodes={nodes} material={material} />
      <Building nodes={nodes} material={material} />
      <Fist nodes={nodes} material={material} />
      <Bridges baseColor={color} nodes={nodes} material={material} />
      <UpperBox nodes={nodes} material={material} />
      <Heart nodes={nodes} material={material} />
      <Dove nodes={nodes} material={material} />
      <HopePaintings nodes={nodes} material={material} />
      <LovePaintings nodes={nodes} material={material} />
      <JusticePaintings nodes={nodes} material={material} />
      <PaintingWalls nodes={nodes} material={material} />
    </group>
  );
};

useGLTF.preload('/environment-transformed.glb');
