import type { NextPage } from 'next';
import dynamic from 'next/dynamic';
import Head from 'next/head';
import styles from '../styles/home/Home.module.scss';
import { useColyseus } from '../hooks/useColyseus';
import { Suspense, useEffect, useRef, useState } from 'react';
import type { Navigator } from 'webxr';
import { useDeviceCheck } from '../hooks/useDeviceCheck';
import { Loader } from '../components/experience/loader/loader';
import { supabaseClient } from '@supabase/supabase-auth-helpers/nextjs';
import { useUser } from '@supabase/supabase-auth-helpers/react';
import { supabase } from '../utils/supabase';
import { Session } from '@supabase/supabase-js';
import { useRouter } from 'next/router';

const Canvas = dynamic(() => import('../components/experience/canvas/canvas'), {
  ssr: false,
});

const Dream: NextPage = () => {
  const { isInVR } = useDeviceCheck();
  const { client, id, room } = useColyseus();
  const [webXRIsSupported, setWebXRIsSupported] = useState<boolean>();
  const videoRef = useRef<HTMLVideoElement>(null);
  const [data, setData] = useState<any[]>();
  const [session, setSession] = useState<Session | null>(null);
  const router = useRouter();

  useEffect(() => {
    const webXRNavigator: Navigator = navigator as any as Navigator;

    if ('xr' in webXRNavigator) {
      webXRNavigator.xr.isSessionSupported('immersive-vr').then((supported) => {
        setWebXRIsSupported(supported);
      });
    }
  }, [isInVR]);

  useEffect(() => {
    const currentSession = supabase.auth.session();

    setSession(currentSession);
    const user = supabase.auth.user();
    supabase.auth.onAuthStateChange((_event, session) => {
      setSession(session);
    });
  }, []);

  return (
    <div className={styles.container}>
      {session && (
        <>
          <Head>
            <title>Create Next App</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
          </Head>
          {renderCanvas()}
        </>
      )}
    </div>
  );

  function renderCanvas() {
    if (!client || !id || !room) {
      return null;
    }

    return (
      <Suspense fallback={<Loader />}>
        <Canvas
          isWebXrSupported={webXRIsSupported ?? false}
          client={client}
          id={id}
          room={room}
        />
      </Suspense>
    );
  }
};

export default Dream;
